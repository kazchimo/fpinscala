[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial source changes: [0m
[0m[[0m[0mdebug[0m] [0m[0m	removed:Set()[0m
[0m[[0m[0mdebug[0m] [0m[0m	added: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0m	modified: Set(/Users/moriyamakazuki/development/Scala/fpinscala/src/main/scala/example/Answers.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated products: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mExternal API changes: API Changes: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mModified binary dependencies: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial directly invalidated classes: Set(example.Answers, example.Answers.None, example.Answers.Either, example.Answers.Branch, example.Answers.Leaf, example.Answers.Tree, example.Answers.Some, example.Answers.Option, example.Answers.Right, example.Answers.Left)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mSources indirectly invalidated by:[0m
[0m[[0m[0mdebug[0m] [0m[0m	product: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0m	binary dep: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0m	external source: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mAll initially invalidated classes: Set(example.Answers, example.Answers.None, example.Answers.Either, example.Answers.Branch, example.Answers.Leaf, example.Answers.Tree, example.Answers.Some, example.Answers.Option, example.Answers.Right, example.Answers.Left)[0m
[0m[[0m[0mdebug[0m] [0m[0mAll initially invalidated sources:Set(/Users/moriyamakazuki/development/Scala/fpinscala/src/main/scala/example/Answers.scala)[0m
[0m[[0m[0minfo[0m] [0m[0mCompiling 1 Scala source to /Users/moriyamakazuki/development/Scala/fpinscala/target/scala-2.12/classes ...[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting org.scala-sbt:compiler-bridge_2.12:1.2.5:compile for Scala 2.12.8[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting org.scala-sbt:compiler-bridge_2.12:1.2.5:compile for Scala 2.12.8[0m
[0m[[0m[0mdebug[0m] [0m[0m[zinc] Running cached compiler 375066e9 for Scala compiler version 2.12.8[0m
[0m[[0m[0mdebug[0m] [0m[0m[zinc] The Scala compiler is invoked with:[0m
[0m[[0m[0mdebug[0m] [0m[0m	-bootclasspath[0m
[0m[[0m[0mdebug[0m] [0m[0m	/Library/Java/JavaVirtualMachines/jdk1.8.0_201.jdk/Contents/Home/jre/lib/resources.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_201.jdk/Contents/Home/jre/lib/rt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_201.jdk/Contents/Home/jre/lib/sunrsasign.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_201.jdk/Contents/Home/jre/lib/jsse.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_201.jdk/Contents/Home/jre/lib/jce.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_201.jdk/Contents/Home/jre/lib/charsets.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_201.jdk/Contents/Home/jre/lib/jfr.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_201.jdk/Contents/Home/jre/classes:/Users/moriyamakazuki/.ivy2/cache/org.scala-lang/scala-library/jars/scala-library-2.12.8.jar[0m
[0m[[0m[0mdebug[0m] [0m[0m	-classpath[0m
[0m[[0m[0mdebug[0m] [0m[0m	/Users/moriyamakazuki/development/Scala/fpinscala/target/scala-2.12/classes[0m
[0m[[0m[0mdebug[0m] [0m[0mScala compilation took 1.223576293 s[0m
[0m[[0m[0minfo[0m] [0m[0mDone compiling.[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from example.Answers.EitherAnswers.None...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(example.Answers.EitherAnswers.None)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(example.Answers.EitherAnswers.None)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(example.Answers.EitherAnswers.None,ModifiedNames(changes = UsedName(ne,[Default]), UsedName(filter,[Default]), UsedName(canEqual,[Default]), UsedName(productArity,[Default]), UsedName(isEmpty,[Default]), UsedName(equals,[Default]), UsedName(None,[Default]), UsedName(productPrefix,[Default]), UsedName(==,[Default]), UsedName(clone,[Default]), UsedName(synchronized,[Default]), UsedName($init$,[Default]), UsedName(map,[Default]), UsedName(isDefined,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(productIterator,[Default]), UsedName($isInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(finalize,[Default]), UsedName(orElse,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(getOrElse,[Default]), UsedName(notify,[Default]), UsedName(flatMap,[Default]), UsedName(!=,[Default]))) invalidates 1 classes due to The example.Answers.EitherAnswers.None has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ne,[Default]), UsedName(filter,[Default]), UsedName(canEqual,[Default]), UsedName(productArity,[Default]), UsedName(isEmpty,[Default]), UsedName(equals,[Default]), UsedName(None,[Default]), UsedName(productPrefix,[Default]), UsedName(==,[Default]), UsedName(clone,[Default]), UsedName(synchronized,[Default]), UsedName($init$,[Default]), UsedName(map,[Default]), UsedName(isDefined,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(productIterator,[Default]), UsedName($isInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(finalize,[Default]), UsedName(orElse,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(getOrElse,[Default]), UsedName(notify,[Default]), UsedName(flatMap,[Default]), UsedName(!=,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(example.Answers.EitherAnswers.None)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from example.Answers.Left...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(example.Answers.Left)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(example.Answers.Left)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(example.Answers.Left,ModifiedNames(changes = UsedName(ne,[Default]), UsedName(canEqual,[Default]), UsedName(copy,[Default]), UsedName(productArity,[Default]), UsedName(equals,[Default]), UsedName(productPrefix,[Default]), UsedName(==,[Default]), UsedName(clone,[Default]), UsedName(synchronized,[Default]), UsedName($init$,[Default]), UsedName(map,[Default]), UsedName(copy$default$1,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(productIterator,[Default]), UsedName(sequence,[Default]), UsedName($isInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(map2,[Default]), UsedName(notifyAll,[Default]), UsedName(traverse,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(finalize,[Default]), UsedName(example;Answers;Left;init;,[Default]), UsedName(value,[Default]), UsedName(unapply,[Default]), UsedName(Left,[Default]), UsedName(orElse,[Default]), UsedName(apply,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(notify,[Default]), UsedName(flatMap,[Default]), UsedName(!=,[Default]))) invalidates 1 classes due to The example.Answers.Left has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ne,[Default]), UsedName(canEqual,[Default]), UsedName(copy,[Default]), UsedName(productArity,[Default]), UsedName(equals,[Default]), UsedName(productPrefix,[Default]), UsedName(==,[Default]), UsedName(clone,[Default]), UsedName(synchronized,[Default]), UsedName($init$,[Default]), UsedName(map,[Default]), UsedName(copy$default$1,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(productIterator,[Default]), UsedName(sequence,[Default]), UsedName($isInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(map2,[Default]), UsedName(notifyAll,[Default]), UsedName(traverse,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(finalize,[Default]), UsedName(example;Answers;Left;init;,[Default]), UsedName(value,[Default]), UsedName(unapply,[Default]), UsedName(Left,[Default]), UsedName(orElse,[Default]), UsedName(apply,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(notify,[Default]), UsedName(flatMap,[Default]), UsedName(!=,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(example.Answers.Left)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from example.Answers.Right...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(example.Answers.Right)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(example.Answers.Right)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(example.Answers.Right,ModifiedNames(changes = UsedName(ne,[Default]), UsedName(canEqual,[Default]), UsedName(copy,[Default]), UsedName(productArity,[Default]), UsedName(equals,[Default]), UsedName(productPrefix,[Default]), UsedName(==,[Default]), UsedName(clone,[Default]), UsedName(synchronized,[Default]), UsedName($init$,[Default]), UsedName(map,[Default]), UsedName(copy$default$1,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(productIterator,[Default]), UsedName(sequence,[Default]), UsedName($isInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(map2,[Default]), UsedName(Right,[Default]), UsedName(notifyAll,[Default]), UsedName(traverse,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(finalize,[Default]), UsedName(value,[Default]), UsedName(unapply,[Default]), UsedName(orElse,[Default]), UsedName(apply,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(notify,[Default]), UsedName(flatMap,[Default]), UsedName(example;Answers;Right;init;,[Default]), UsedName(!=,[Default]))) invalidates 1 classes due to The example.Answers.Right has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ne,[Default]), UsedName(canEqual,[Default]), UsedName(copy,[Default]), UsedName(productArity,[Default]), UsedName(equals,[Default]), UsedName(productPrefix,[Default]), UsedName(==,[Default]), UsedName(clone,[Default]), UsedName(synchronized,[Default]), UsedName($init$,[Default]), UsedName(map,[Default]), UsedName(copy$default$1,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(productIterator,[Default]), UsedName(sequence,[Default]), UsedName($isInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(map2,[Default]), UsedName(Right,[Default]), UsedName(notifyAll,[Default]), UsedName(traverse,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(finalize,[Default]), UsedName(value,[Default]), UsedName(unapply,[Default]), UsedName(orElse,[Default]), UsedName(apply,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(notify,[Default]), UsedName(flatMap,[Default]), UsedName(example;Answers;Right;init;,[Default]), UsedName(!=,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(example.Answers.Right)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from example.Answers.EitherAnswers.Right...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(example.Answers.EitherAnswers.Right)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(example.Answers.EitherAnswers.Right)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(example.Answers.EitherAnswers.Right,ModifiedNames(changes = UsedName(ne,[Default]), UsedName(canEqual,[Default]), UsedName(copy,[Default]), UsedName(productArity,[Default]), UsedName(equals,[Default]), UsedName(productPrefix,[Default]), UsedName(==,[Default]), UsedName(clone,[Default]), UsedName(synchronized,[Default]), UsedName($init$,[Default]), UsedName(map,[Default]), UsedName(copy$default$1,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(productIterator,[Default]), UsedName(sequence,[Default]), UsedName(example;Answers;EitherAnswers;Right;init;,[Default]), UsedName($isInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(map2,[Default]), UsedName(Right,[Default]), UsedName(notifyAll,[Default]), UsedName(traverse,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(finalize,[Default]), UsedName(value,[Default]), UsedName(unapply,[Default]), UsedName(orElse,[Default]), UsedName(apply,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(notify,[Default]), UsedName(flatMap,[Default]), UsedName(!=,[Default]))) invalidates 1 classes due to The example.Answers.EitherAnswers.Right has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ne,[Default]), UsedName(canEqual,[Default]), UsedName(copy,[Default]), UsedName(productArity,[Default]), UsedName(equals,[Default]), UsedName(productPrefix,[Default]), UsedName(==,[Default]), UsedName(clone,[Default]), UsedName(synchronized,[Default]), UsedName($init$,[Default]), UsedName(map,[Default]), UsedName(copy$default$1,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(productIterator,[Default]), UsedName(sequence,[Default]), UsedName(example;Answers;EitherAnswers;Right;init;,[Default]), UsedName($isInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(map2,[Default]), UsedName(Right,[Default]), UsedName(notifyAll,[Default]), UsedName(traverse,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(finalize,[Default]), UsedName(value,[Default]), UsedName(unapply,[Default]), UsedName(orElse,[Default]), UsedName(apply,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(notify,[Default]), UsedName(flatMap,[Default]), UsedName(!=,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(example.Answers.EitherAnswers.Right)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from example.Answers.EitherAnswers.Left...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(example.Answers.EitherAnswers.Left)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(example.Answers.EitherAnswers.Left)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(example.Answers.EitherAnswers.Left,ModifiedNames(changes = UsedName(ne,[Default]), UsedName(canEqual,[Default]), UsedName(copy,[Default]), UsedName(productArity,[Default]), UsedName(equals,[Default]), UsedName(productPrefix,[Default]), UsedName(==,[Default]), UsedName(clone,[Default]), UsedName(synchronized,[Default]), UsedName($init$,[Default]), UsedName(map,[Default]), UsedName(copy$default$1,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(productIterator,[Default]), UsedName(sequence,[Default]), UsedName($isInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(map2,[Default]), UsedName(notifyAll,[Default]), UsedName(traverse,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(example;Answers;EitherAnswers;Left;init;,[Default]), UsedName(finalize,[Default]), UsedName(value,[Default]), UsedName(unapply,[Default]), UsedName(Left,[Default]), UsedName(orElse,[Default]), UsedName(apply,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(notify,[Default]), UsedName(flatMap,[Default]), UsedName(!=,[Default]))) invalidates 1 classes due to The example.Answers.EitherAnswers.Left has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ne,[Default]), UsedName(canEqual,[Default]), UsedName(copy,[Default]), UsedName(productArity,[Default]), UsedName(equals,[Default]), UsedName(productPrefix,[Default]), UsedName(==,[Default]), UsedName(clone,[Default]), UsedName(synchronized,[Default]), UsedName($init$,[Default]), UsedName(map,[Default]), UsedName(copy$default$1,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(productIterator,[Default]), UsedName(sequence,[Default]), UsedName($isInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(map2,[Default]), UsedName(notifyAll,[Default]), UsedName(traverse,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(example;Answers;EitherAnswers;Left;init;,[Default]), UsedName(finalize,[Default]), UsedName(value,[Default]), UsedName(unapply,[Default]), UsedName(Left,[Default]), UsedName(orElse,[Default]), UsedName(apply,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(notify,[Default]), UsedName(flatMap,[Default]), UsedName(!=,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(example.Answers.EitherAnswers.Left)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from example.Answers.Some...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(example.Answers.Some)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(example.Answers.Some)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(example.Answers.Some,ModifiedNames(changes = UsedName(ne,[Default]), UsedName(filter,[Default]), UsedName(Some,[Default]), UsedName(canEqual,[Default]), UsedName(copy,[Default]), UsedName(productArity,[Default]), UsedName(isEmpty,[Default]), UsedName(equals,[Default]), UsedName(get,[Default]), UsedName(productPrefix,[Default]), UsedName(example;Answers;Some;init;,[Default]), UsedName(==,[Default]), UsedName(clone,[Default]), UsedName(synchronized,[Default]), UsedName($init$,[Default]), UsedName(map,[Default]), UsedName(copy$default$1,[Default]), UsedName(isDefined,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(productIterator,[Default]), UsedName($isInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(finalize,[Default]), UsedName(unapply,[Default]), UsedName(orElse,[Default]), UsedName(apply,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(getOrElse,[Default]), UsedName(notify,[Default]), UsedName(flatMap,[Default]), UsedName(!=,[Default]))) invalidates 1 classes due to The example.Answers.Some has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ne,[Default]), UsedName(filter,[Default]), UsedName(Some,[Default]), UsedName(canEqual,[Default]), UsedName(copy,[Default]), UsedName(productArity,[Default]), UsedName(isEmpty,[Default]), UsedName(equals,[Default]), UsedName(get,[Default]), UsedName(productPrefix,[Default]), UsedName(example;Answers;Some;init;,[Default]), UsedName(==,[Default]), UsedName(clone,[Default]), UsedName(synchronized,[Default]), UsedName($init$,[Default]), UsedName(map,[Default]), UsedName(copy$default$1,[Default]), UsedName(isDefined,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(productIterator,[Default]), UsedName($isInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(finalize,[Default]), UsedName(unapply,[Default]), UsedName(orElse,[Default]), UsedName(apply,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(getOrElse,[Default]), UsedName(notify,[Default]), UsedName(flatMap,[Default]), UsedName(!=,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(example.Answers.Some)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from example.Answers.None...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(example.Answers.None)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(example.Answers.None)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(example.Answers.None,ModifiedNames(changes = UsedName(ne,[Default]), UsedName(filter,[Default]), UsedName(canEqual,[Default]), UsedName(productArity,[Default]), UsedName(isEmpty,[Default]), UsedName(equals,[Default]), UsedName(None,[Default]), UsedName(productPrefix,[Default]), UsedName(==,[Default]), UsedName(clone,[Default]), UsedName(synchronized,[Default]), UsedName($init$,[Default]), UsedName(map,[Default]), UsedName(isDefined,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(productIterator,[Default]), UsedName($isInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(finalize,[Default]), UsedName(orElse,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(getOrElse,[Default]), UsedName(notify,[Default]), UsedName(flatMap,[Default]), UsedName(!=,[Default]))) invalidates 1 classes due to The example.Answers.None has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ne,[Default]), UsedName(filter,[Default]), UsedName(canEqual,[Default]), UsedName(productArity,[Default]), UsedName(isEmpty,[Default]), UsedName(equals,[Default]), UsedName(None,[Default]), UsedName(productPrefix,[Default]), UsedName(==,[Default]), UsedName(clone,[Default]), UsedName(synchronized,[Default]), UsedName($init$,[Default]), UsedName(map,[Default]), UsedName(isDefined,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(productIterator,[Default]), UsedName($isInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(finalize,[Default]), UsedName(orElse,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(getOrElse,[Default]), UsedName(notify,[Default]), UsedName(flatMap,[Default]), UsedName(!=,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(example.Answers.None)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from example.Answers.EitherAnswers.Some...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(example.Answers.EitherAnswers.Some)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(example.Answers.EitherAnswers.Some)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(example.Answers.EitherAnswers.Some,ModifiedNames(changes = UsedName(ne,[Default]), UsedName(filter,[Default]), UsedName(Some,[Default]), UsedName(canEqual,[Default]), UsedName(copy,[Default]), UsedName(productArity,[Default]), UsedName(isEmpty,[Default]), UsedName(equals,[Default]), UsedName(get,[Default]), UsedName(productPrefix,[Default]), UsedName(==,[Default]), UsedName(clone,[Default]), UsedName(synchronized,[Default]), UsedName($init$,[Default]), UsedName(map,[Default]), UsedName(copy$default$1,[Default]), UsedName(isDefined,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(productIterator,[Default]), UsedName(example;Answers;EitherAnswers;Some;init;,[Default]), UsedName($isInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(finalize,[Default]), UsedName(unapply,[Default]), UsedName(orElse,[Default]), UsedName(apply,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(getOrElse,[Default]), UsedName(notify,[Default]), UsedName(flatMap,[Default]), UsedName(!=,[Default]))) invalidates 1 classes due to The example.Answers.EitherAnswers.Some has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ne,[Default]), UsedName(filter,[Default]), UsedName(Some,[Default]), UsedName(canEqual,[Default]), UsedName(copy,[Default]), UsedName(productArity,[Default]), UsedName(isEmpty,[Default]), UsedName(equals,[Default]), UsedName(get,[Default]), UsedName(productPrefix,[Default]), UsedName(==,[Default]), UsedName(clone,[Default]), UsedName(synchronized,[Default]), UsedName($init$,[Default]), UsedName(map,[Default]), UsedName(copy$default$1,[Default]), UsedName(isDefined,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(productIterator,[Default]), UsedName(example;Answers;EitherAnswers;Some;init;,[Default]), UsedName($isInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(finalize,[Default]), UsedName(unapply,[Default]), UsedName(orElse,[Default]), UsedName(apply,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(getOrElse,[Default]), UsedName(notify,[Default]), UsedName(flatMap,[Default]), UsedName(!=,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(example.Answers.EitherAnswers.Some)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from example.Answers.EitherAnswers.Either...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(example.Answers.EitherAnswers.Either)[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding example.Answers.EitherAnswers.Left by example.Answers.EitherAnswers.Either[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding example.Answers.EitherAnswers.Right by example.Answers.EitherAnswers.Either[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(example.Answers.EitherAnswers.Left, example.Answers.EitherAnswers.Right, example.Answers.EitherAnswers.Either)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(example.Answers.EitherAnswers.Either,ModifiedNames(changes = UsedName(ne,[Default]), UsedName(equals,[Default]), UsedName(==,[Default]), UsedName(clone,[Default]), UsedName(synchronized,[Default]), UsedName($init$,[Default]), UsedName(map,[Default]), UsedName(##,[Default]), UsedName(sequence,[Default]), UsedName($isInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(map2,[Default]), UsedName(notifyAll,[Default]), UsedName(traverse,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(finalize,[Default]), UsedName(Either,[Default]), UsedName(orElse,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(notify,[Default]), UsedName(flatMap,[Default]), UsedName(!=,[Default]))) invalidates 3 classes due to The example.Answers.EitherAnswers.Either has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ne,[Default]), UsedName(equals,[Default]), UsedName(==,[Default]), UsedName(clone,[Default]), UsedName(synchronized,[Default]), UsedName($init$,[Default]), UsedName(map,[Default]), UsedName(##,[Default]), UsedName(sequence,[Default]), UsedName($isInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(map2,[Default]), UsedName(notifyAll,[Default]), UsedName(traverse,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(finalize,[Default]), UsedName(Either,[Default]), UsedName(orElse,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(notify,[Default]), UsedName(flatMap,[Default]), UsedName(!=,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(example.Answers.EitherAnswers.Left, example.Answers.EitherAnswers.Right, example.Answers.EitherAnswers.Either)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from example.Answers.Option...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(example.Answers.Option)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(example.Answers.Option)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(example.Answers.Option,ModifiedNames(changes = UsedName(ne,[Default]), UsedName(filter,[Default]), UsedName(isEmpty,[Default]), UsedName(equals,[Default]), UsedName(==,[Default]), UsedName(clone,[Default]), UsedName(synchronized,[Default]), UsedName($init$,[Default]), UsedName(map,[Default]), UsedName(isDefined,[Default]), UsedName(##,[Default]), UsedName($isInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(finalize,[Default]), UsedName(orElse,[Default]), UsedName(Option,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(getOrElse,[Default]), UsedName(notify,[Default]), UsedName(flatMap,[Default]), UsedName(!=,[Default]))) invalidates 1 classes due to The example.Answers.Option has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ne,[Default]), UsedName(filter,[Default]), UsedName(isEmpty,[Default]), UsedName(equals,[Default]), UsedName(==,[Default]), UsedName(clone,[Default]), UsedName(synchronized,[Default]), UsedName($init$,[Default]), UsedName(map,[Default]), UsedName(isDefined,[Default]), UsedName(##,[Default]), UsedName($isInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(finalize,[Default]), UsedName(orElse,[Default]), UsedName(Option,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(getOrElse,[Default]), UsedName(notify,[Default]), UsedName(flatMap,[Default]), UsedName(!=,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(example.Answers.Option)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from example.Answers.Either...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(example.Answers.Either)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(example.Answers.Either)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(example.Answers.Either,ModifiedNames(changes = UsedName(ne,[Default]), UsedName(equals,[Default]), UsedName(==,[Default]), UsedName(clone,[Default]), UsedName(synchronized,[Default]), UsedName($init$,[Default]), UsedName(map,[Default]), UsedName(##,[Default]), UsedName(sequence,[Default]), UsedName($isInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(map2,[Default]), UsedName(notifyAll,[Default]), UsedName(traverse,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(finalize,[Default]), UsedName(Either,[Default]), UsedName(orElse,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(notify,[Default]), UsedName(flatMap,[Default]), UsedName(!=,[Default]))) invalidates 1 classes due to The example.Answers.Either has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ne,[Default]), UsedName(equals,[Default]), UsedName(==,[Default]), UsedName(clone,[Default]), UsedName(synchronized,[Default]), UsedName($init$,[Default]), UsedName(map,[Default]), UsedName(##,[Default]), UsedName(sequence,[Default]), UsedName($isInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(map2,[Default]), UsedName(notifyAll,[Default]), UsedName(traverse,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(finalize,[Default]), UsedName(Either,[Default]), UsedName(orElse,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(notify,[Default]), UsedName(flatMap,[Default]), UsedName(!=,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(example.Answers.Either)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from example.Answers.EitherAnswers...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(example.Answers.EitherAnswers)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(example.Answers.EitherAnswers)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(example.Answers.EitherAnswers,ModifiedNames(changes = UsedName(ne,[Default]), UsedName(Some,[Default]), UsedName(equals,[Default]), UsedName(None,[Default]), UsedName(EitherAnswers,[Default]), UsedName(==,[Default]), UsedName(clone,[Default]), UsedName(synchronized,[Default]), UsedName(variance,[Default]), UsedName(##,[Default]), UsedName(sequence,[Default]), UsedName(test_41,[Default]), UsedName($isInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(map2,[Default]), UsedName(Right,[Default]), UsedName(notifyAll,[Default]), UsedName(traverse,[Default]), UsedName(hashCode,[Default]), UsedName(test4_5,[Default]), UsedName(isInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(finalize,[Default]), UsedName(Either,[Default]), UsedName(Left,[Default]), UsedName(Option,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(notify,[Default]), UsedName(!=,[Default]))) invalidates 1 classes due to The example.Answers.EitherAnswers has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ne,[Default]), UsedName(Some,[Default]), UsedName(equals,[Default]), UsedName(None,[Default]), UsedName(EitherAnswers,[Default]), UsedName(==,[Default]), UsedName(clone,[Default]), UsedName(synchronized,[Default]), UsedName(variance,[Default]), UsedName(##,[Default]), UsedName(sequence,[Default]), UsedName(test_41,[Default]), UsedName($isInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(map2,[Default]), UsedName(Right,[Default]), UsedName(notifyAll,[Default]), UsedName(traverse,[Default]), UsedName(hashCode,[Default]), UsedName(test4_5,[Default]), UsedName(isInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(finalize,[Default]), UsedName(Either,[Default]), UsedName(Left,[Default]), UsedName(Option,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(notify,[Default]), UsedName(!=,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(example.Answers.EitherAnswers)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from example.Answers...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(example.Answers)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(example.Answers)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(example.Answers,ModifiedNames(changes = UsedName(Some,[Default]), UsedName(None,[Default]), UsedName(EitherAnswers,[Default]), UsedName(variance,[Default]), UsedName(sequence,[Default]), UsedName(test_41,[Default]), UsedName(map2,[Default]), UsedName(Right,[Default]), UsedName(traverse,[Default]), UsedName(test4_5,[Default]), UsedName(Either,[Default]), UsedName(Left,[Default]), UsedName(Option,[Default]))) invalidates 1 classes due to The example.Answers has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(Some,[Default]), UsedName(None,[Default]), UsedName(EitherAnswers,[Default]), UsedName(variance,[Default]), UsedName(sequence,[Default]), UsedName(test_41,[Default]), UsedName(map2,[Default]), UsedName(Right,[Default]), UsedName(traverse,[Default]), UsedName(test4_5,[Default]), UsedName(Either,[Default]), UsedName(Left,[Default]), UsedName(Option,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(example.Answers)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from example.Answers.EitherAnswers.Option...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(example.Answers.EitherAnswers.Option)[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding example.Answers.EitherAnswers.Some by example.Answers.EitherAnswers.Option[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding example.Answers.EitherAnswers.None by example.Answers.EitherAnswers.Option[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(example.Answers.EitherAnswers.None, example.Answers.EitherAnswers.Some, example.Answers.EitherAnswers.Option)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(example.Answers.EitherAnswers.Option,ModifiedNames(changes = UsedName(ne,[Default]), UsedName(filter,[Default]), UsedName(isEmpty,[Default]), UsedName(equals,[Default]), UsedName(==,[Default]), UsedName(clone,[Default]), UsedName(synchronized,[Default]), UsedName($init$,[Default]), UsedName(map,[Default]), UsedName(isDefined,[Default]), UsedName(##,[Default]), UsedName($isInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(finalize,[Default]), UsedName(orElse,[Default]), UsedName(Option,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(getOrElse,[Default]), UsedName(notify,[Default]), UsedName(flatMap,[Default]), UsedName(!=,[Default]))) invalidates 3 classes due to The example.Answers.EitherAnswers.Option has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ne,[Default]), UsedName(filter,[Default]), UsedName(isEmpty,[Default]), UsedName(equals,[Default]), UsedName(==,[Default]), UsedName(clone,[Default]), UsedName(synchronized,[Default]), UsedName($init$,[Default]), UsedName(map,[Default]), UsedName(isDefined,[Default]), UsedName(##,[Default]), UsedName($isInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(finalize,[Default]), UsedName(orElse,[Default]), UsedName(Option,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(getOrElse,[Default]), UsedName(notify,[Default]), UsedName(flatMap,[Default]), UsedName(!=,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(example.Answers.EitherAnswers.None, example.Answers.EitherAnswers.Some, example.Answers.EitherAnswers.Option)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mNew invalidations:[0m
[0m[[0m[0mdebug[0m] [0m[0m	Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mPreviously invalidated, but (transitively) depend on new invalidations:[0m
[0m[[0m[0mdebug[0m] [0m[0m	Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mAll newly invalidated classes after taking into account (previously) recompiled classes:Set()[0m
